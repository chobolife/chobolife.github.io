<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://chobolife.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://chobolife.github.io/" rel="alternate" type="text/html" /><updated>2019-07-28T05:25:39+00:00</updated><id>http://chobolife.github.io/feed.xml</id><title type="html">우당탕탕 초보라이프</title><subtitle>모든 사람의 인생은 한 번 뿐이므로 삶을 살아가는 데 있어서 초보가 아닌 사람은 없습니다. 완벽함을 꿈꾸기보다는 나의 부족한 점을 인정한다면 어떤 것을 하든지 즐겁지 않을까요.</subtitle><entry><title type="html">나의 Jekyll 여행기 (2)</title><link href="http://chobolife.github.io/blog/2019/07/27/start-jekyll-(2)" rel="alternate" type="text/html" title="나의 Jekyll 여행기 (2)" /><published>2019-07-27T18:00:00+00:00</published><updated>2019-07-27T18:00:00+00:00</updated><id>http://chobolife.github.io/blog/2019/07/27/start-jekyll-(2)</id><content type="html" xml:base="http://chobolife.github.io/blog/2019/07/27/start-jekyll-(2)">&lt;h1 id=&quot;aws에서-시도하다&quot;&gt;AWS에서 시도하다&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;/blog/2019/07/26/start-jekyll-(1)&quot;&gt;지난 포스팅&lt;/a&gt;에서 했던 실패를 뒤로 하고 나는 계속 Jekyll을 사용할 수 있는 방법을 고민했다.
사실 &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyll 공식 홈페이지&lt;/a&gt;에서는 Windows에서도 Jekyll을 사용할 수 있는 방법에 대해 나오기는 한다.
하지만 공식적으로 지원하지 않는 플랫폼이고, 언제 어디서 무슨 문제가 발생할지도 모르는 것이었기 때문에 나는 다른 방법이 가능하면 다른 방법으로 하고 싶었다.
그래서 생각한 방법이 AWS EC2였다.
EC2에 linux instance를 만들고 거기서 설치하면 되지 않을까? 하고 생각했던 것이었다.&lt;/p&gt;

&lt;h1 id=&quot;amazon-linux&quot;&gt;Amazon Linux&lt;/h1&gt;
&lt;p&gt;EC2를 만들 때 기존의 AMI를 기반으로 만들 수 있는데, 이 때 나오는 메뉴는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://drive.google.com/uc?id=1ZphU8Wf-YG5Cv9rXbAvfwa1JYgnHjxcE&quot; alt=&quot;Amazon EC2를 생성할 때 이미 만들어진 템플릿인 AMI를 선택할 수 있다.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나는 그동안 linux instance가 필요할 때면 나는 아무런 생각없이 Amazon Linux 로 시작하는 AMI를 생성했다.
사실 Ubuntu와 Amazon Linux의 차이를 잘 모르고 (알아보려고 한 적도 없다) 그냥 가장 위에 있으니까 썼다.
Amazon이 약간 필요한 대로 수정했을 것이라고만 생각했다.
어쨌든 이번에도 나는 가장 위에 있는 Amazon Linux 2 AMI (HVM), SSD Volume Type으로 만들었다.&lt;/p&gt;

&lt;p&gt;EC2 instance를 만드는 것은 금세 끝난다.
ssh로 접속하고 나서 아까와 마찬가지로 습관처럼 몇 개의 필수 package를 설치한 뒤 Jekyll에 필요한 ruby 관련 package를 설치했다. 이것도 금방 되었다.
그리고 나서 gem에서 jekyll과 bundler를 설치하려고 하니…
이건 또 왠걸.
Jekyll은 ruby 2.1 이상의 버전이 필요한데 여기에 설치되어 있는 ruby의 버전은 2.0이라서 설치를 못한다고 한다.&lt;/p&gt;

&lt;h1 id=&quot;드디어-성공&quot;&gt;드디어 성공&lt;/h1&gt;
&lt;p&gt;그러면 방금 만든 EC2 instance는 재빨리 terminate시키고 이번에는 Ubuntu의 EC2를 설치해 보기로 했다.
어차피 지금까지도 여러 가지 시행착오와 고생을 했는데 한 번 더 하는 걸 못할까?
이번에는 왠지 될 것 같았다.
&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyll 공식 홈페이지&lt;/a&gt;에서도 ubuntu에서 설치하는 방법이 나와 있기 때문에 나도 그것과 동일하게 ubuntu에서 설치하려고 하면 잘 될 것 같았다.
사실 cygwin에서 설치를 시도했을 때는 ‘되겠지… 설마 안 되겠어?’ 라는 생각이었는데 ubuntu에서는 ‘이건 되어야지. 이것도 안 되면 말이 안 되지’ 라는 생각이 들었다.
(결과부터 말하자면 이번에는 설치에 성공했으므로 설치 과정을 간략하게 기록해 두겠다.)&lt;/p&gt;

&lt;p&gt;아까 그림에서 3번째에 있었던 Ubuntu Server 18.04 LTS (HVM), SSD Volume Type 의 EC2를 생성했다.
EC2에 ssh로 접속하고 나서, 익숙한 명령어들을 다시 입력한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 package manager를 업데이트해 주고 나서&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install vim curl git openssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 입력하면 필수 package가 설치된다. 그런데 Ubuntu AMI는 이미 필요한 package가 많이 설치되어 있었다.&lt;/p&gt;

&lt;p&gt;그리고 나서 이제 진짜 Jekyll에 필요한 package들을 설치했다.
여기부터는 &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyll 공식 홈페이지&lt;/a&gt;에 있는 대로 한 것이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ruby ruby-dev build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;어느 정도의 저장 공간이 필요한데 동의하겠느냐고 묻는다.
사뿐히 &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;를 누르고 엔터를 치면 본격적으로 설치가 된다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;를 추가해 준다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo '# Install Ruby Gems to ~/gems' &amp;gt;&amp;gt; ~/.bashrc
echo 'export GEM_HOME=$HOME/gems' &amp;gt;&amp;gt; ~/.bashrc
echo 'export PATH=$HOME/gems/bin:$PATH' &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 되는데 나는 사실 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; 파일을 직접 편집했다.
특히 처음 세팅하는 환경에서는 내가 필요한 설정도 해 주어야 하기 때문에 같이 했다.&lt;/p&gt;

&lt;p&gt;이렇게 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;에 추가한 후 이제 gem을 이용해서 jekyll을 설치했다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 이와 같이 설치할 때 중간에 약간 미심쩍은 메세지가 나온다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching: sass-3.7.4.gem (100%)

Ruby Sass has reached end-of-life and should no longer be used.

* If you use Sass as a command-line tool, we recommend using Dart Sass, the new
  primary implementation: https://sass-lang.com/install

* If you use Sass as a plug-in for a Ruby web framework, we recommend using the
  sassc gem: https://github.com/sass/sassc-ruby#readme

* For more details, please refer to the Sass blog:
  https://sass-lang.com/blog/posts/7828841

Successfully installed sass-3.7.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘 읽어보면 더 이상 지원되지 않는다는 이야기인 것 같고, 그래도 설치에 실패할 정도로 치명적인 문제는 아닌 것 같다.
마지막에는 아래와 같은 메세지가 출력되며 설치 과정이 끝났다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Done installing documentation for bundler after 3 seconds
26 gems installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;jekyll-설치-그-이후&quot;&gt;Jekyll 설치, 그 이후&lt;/h1&gt;
&lt;p&gt;Jekyll 설치는 잘 되었다.
다음으로 생각해야 할 것은 Jekyll로 만든 사이트를 github이나 AWS S3 등에 업로드하는 것이다.&lt;/p&gt;

&lt;p&gt;github.io에 하면 호스팅도 자동으로 되고, 무료이며, git으로 commit만 하면 바로 웹에 올릴 수 있기 때문에 편하다.
AWS S3도 정적 웹 호스팅을 쉽게 할 수 있고, 요금이 부과될 정도로 traffic이 발생하지 않는다는 전제 하에 개인 블로그 용도로만 쓰자면 돈이 거의 들지 않으며, 몇 가지 세팅을 해 주면 github처럼 쉽게 할 수 있다.
엄밀히 말하면 안 해봐서 모르지만 쉽게 할 수 있을 &lt;strong&gt;것 같다&lt;/strong&gt;. IAM 역할 설정을 해 주고 AWS cli를 설치해서 이렇게 이렇게 해주면 되겠지…라고 생각만 해 봤는데 직접 해 본 건 아니다.
분명히 그 세팅 과정에서 내 생각대로 한 번에 쭉 될 리가 없다. 어렵거나 복잡할 수도 있으니… 다음에 다른 걸로 대체할 수 없이 꼭 S3를 써야만 할 때 해 보기로 하자.&lt;/p&gt;

&lt;p&gt;어쨌든 나는 github을 이용하기로 마음먹었다.
그러면 github에 어떻게 올릴 수 있는지 한번 부딪혀 봐야겠다.
이것은 시도해 보고 다음 포스팅에 올려야겠다.&lt;/p&gt;

&lt;p&gt;아 그 전에 방금 설치한 Jekyll이 잘 동작하는지 확인해 보자.
처음 환경을 만들었다면 Hello World라도 출력해 보는 것이 인지상정 아니겠는가.&lt;/p&gt;

&lt;h1 id=&quot;jekyll-동작-확인&quot;&gt;Jekyll 동작 확인&lt;/h1&gt;
&lt;p&gt;Jekyll 공식 홈페이지에 있는 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/quickstart/&quot;&gt;빠른시작 설명서&lt;/a&gt;, &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/usage/&quot;&gt;기본 사용법&lt;/a&gt;을 참고해서 진행했다.
먼저 home 디렉토리에서 아래와 같이 입력했다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new chobolife
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그러면 아래와 같은 아름다운 로그가 출력된다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Running bundle install in /home/ubuntu/chobolife...
  Bundler: Fetching gem metadata from https://rubygems.org/..............
  Bundler: Fetching gem metadata from https://rubygems.org/..
  Bundler: Resolving dependencies...
  Bundler: Using public_suffix 3.1.1
  Bundler: Using addressable 2.6.0
  Bundler: Using bundler 2.0.2
  Bundler: Using colorator 1.1.0
  Bundler: Using concurrent-ruby 1.1.5
  Bundler: Using eventmachine 1.2.7
  Bundler: Using http_parser.rb 0.6.0
  Bundler: Using em-websocket 0.5.1
  Bundler: Using ffi 1.11.1
  Bundler: Using forwardable-extended 2.6.0
  Bundler: Using i18n 0.9.5
  Bundler: Using rb-fsevent 0.10.3
  Bundler: Using rb-inotify 0.10.0
  Bundler: Using sass-listen 4.0.0
  Bundler: Using sass 3.7.4
  Bundler: Using jekyll-sass-converter 1.5.2
  Bundler: Using ruby_dep 1.5.0
  Bundler: Using listen 3.1.5
  Bundler: Using jekyll-watch 2.2.1
  Bundler: Using kramdown 1.17.0
  Bundler: Using liquid 4.0.3
  Bundler: Using mercenary 0.3.6
  Bundler: Using pathutil 0.16.2
  Bundler: Using rouge 3.7.0
  Bundler: Using safe_yaml 1.0.5
  Bundler: Using jekyll 3.8.6
  Bundler: Fetching jekyll-feed 0.12.1
  Bundler: Installing jekyll-feed 0.12.1
  Bundler: Fetching jekyll-seo-tag 2.6.1
  Bundler: Installing jekyll-seo-tag 2.6.1
  Bundler: Fetching minima 2.5.0
  Bundler: Installing minima 2.5.0
  Bundler: Bundle complete! 6 Gemfile dependencies, 29 gems now installed.
  Bundler: Use `bundle info [gemname]` to see where a bundled gem is installed.
New jekyll site installed in /home/ubuntu/chobolife.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제대로 된 것일까? 일단 home 디렉토리 밑에 chobolife라는 디렉토리가 새로 생겼다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd chobolife&lt;/code&gt; 명령으로 새로 생긴 디렉토리에 들어가서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ll&lt;/code&gt; 명령을 쳐 보면 이렇게 나온다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;total 40
drwxrwxr-x 3 ubuntu ubuntu 4096 Jul 26 23:50 ./
drwxr-xr-x 9 ubuntu ubuntu 4096 Jul 26 23:49 ../
-rw-r--r-- 1 ubuntu ubuntu   35 Jul 26 23:49 .gitignore
-rw-r--r-- 1 ubuntu ubuntu  398 Jul 26 23:49 404.html
-rw-rw-r-- 1 ubuntu ubuntu 1119 Jul 26 23:49 Gemfile
-rw-rw-r-- 1 ubuntu ubuntu 1871 Jul 26 23:50 Gemfile.lock
-rw-r--r-- 1 ubuntu ubuntu 1652 Jul 26 23:49 _config.yml
drwxrwxr-x 2 ubuntu ubuntu 4096 Jul 26 23:49 _posts/
-rw-r--r-- 1 ubuntu ubuntu  539 Jul 26 23:49 about.md
-rw-r--r-- 1 ubuntu ubuntu  175 Jul 26 23:49 index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아직 Jekyll의 구조나 원리에 대해서는 아무 것도 모르지만 뭔가 잘 된 것 같다. 기분이 편안하다.
그러면 여기서 아래 명령으로 Jekyll을 간단하게 실행해 보자.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 입력하니 Jekyll이 무언가 일을 한 것 같다. 이번에는 아래와 같이 출력되었다. 역시 마음이 편안하다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuration file: /home/ubuntu/chobolife/_config.yml
            Source: /home/ubuntu/chobolife
       Destination: /home/ubuntu/chobolife/_site
 Incremental build: disabled. Enable with --incremental
      Generating...
       Jekyll Feed: Generating feed for posts
                    done in 0.395 seconds.
 Auto-regeneration: disabled. Use --watch to enable.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;뭐가 달라진 게 있을까? 그러면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ll&lt;/code&gt; 명령으로 다시 한번 무엇이 바뀌었는지 확인해 보았다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;total 48
drwxrwxr-x 5 ubuntu ubuntu 4096 Jul 26 23:51 ./
drwxr-xr-x 9 ubuntu ubuntu 4096 Jul 26 23:49 ../
-rw-r--r-- 1 ubuntu ubuntu   35 Jul 26 23:49 .gitignore
drwxrwxr-x 4 ubuntu ubuntu 4096 Jul 26 23:51 .sass-cache/
-rw-r--r-- 1 ubuntu ubuntu  398 Jul 26 23:49 404.html
-rw-rw-r-- 1 ubuntu ubuntu 1119 Jul 26 23:49 Gemfile
-rw-rw-r-- 1 ubuntu ubuntu 1871 Jul 26 23:50 Gemfile.lock
-rw-r--r-- 1 ubuntu ubuntu 1652 Jul 26 23:49 _config.yml
drwxrwxr-x 2 ubuntu ubuntu 4096 Jul 26 23:49 _posts/
drwxrwxr-x 5 ubuntu ubuntu 4096 Jul 26 23:51 _site/
-rw-r--r-- 1 ubuntu ubuntu  539 Jul 26 23:49 about.md
-rw-r--r-- 1 ubuntu ubuntu  175 Jul 26 23:49 index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;확실히 무언가 바뀌었다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; 명령 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.sass-cache&lt;/code&gt; 디렉토리와 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; 디렉토리가 새로 생긴 것을 알 수 있다.
그리고 조금 더 자세히 살펴보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; 디렉토리 아래 깊숙한 곳에 &lt;code class=&quot;highlighter-rouge&quot;&gt;welcome-to-jekyll.html&lt;/code&gt; 파일이 생성되었다.
이 파일을 vim으로 열어보면 Jekyll의 설치 및 작동에는 문제가 없는 것 같다.
Hello World를 출력해 보지는 않았지만 별다른 에러 메시지가 없고 파일이 잘 생성되는 것으로 봐서 이번에는 성공한 것 같다.&lt;/p&gt;

&lt;p&gt;그러면 이제 이렇게 생성된 html 파일을 배포하는 방법을 고민해 봐야겠다.&lt;/p&gt;</content><author><name></name></author><summary type="html">AWS에서 시도하다 지난 포스팅에서 했던 실패를 뒤로 하고 나는 계속 Jekyll을 사용할 수 있는 방법을 고민했다. 사실 Jekyll 공식 홈페이지에서는 Windows에서도 Jekyll을 사용할 수 있는 방법에 대해 나오기는 한다. 하지만 공식적으로 지원하지 않는 플랫폼이고, 언제 어디서 무슨 문제가 발생할지도 모르는 것이었기 때문에 나는 다른 방법이 가능하면 다른 방법으로 하고 싶었다. 그래서 생각한 방법이 AWS EC2였다. EC2에 linux instance를 만들고 거기서 설치하면 되지 않을까? 하고 생각했던 것이었다.</summary></entry><entry><title type="html">나의 Jekyll 여행기 (1)</title><link href="http://chobolife.github.io/blog/2019/07/26/start-jekyll-(1)" rel="alternate" type="text/html" title="나의 Jekyll 여행기 (1)" /><published>2019-07-26T18:00:00+00:00</published><updated>2019-07-26T18:00:00+00:00</updated><id>http://chobolife.github.io/blog/2019/07/26/start-jekyll-(1)</id><content type="html" xml:base="http://chobolife.github.io/blog/2019/07/26/start-jekyll-(1)">&lt;h1 id=&quot;시작&quot;&gt;시작&lt;/h1&gt;
&lt;p&gt;블로그를 시작하려고 한다. 아마 나의 이런저런 생각들, 그리고 내가 했던 것들을 기록하기 위한 용도로 사용할 것 같다.&lt;/p&gt;

&lt;p&gt;이것저것 알아보고 나서, Jekyll을 사용해 보기로 했다.
일반 포털 사이트에서 제공하는 블로그는 자유도가 낮아 새로운 것을 시도해보기 어렵기 때문에 처음부터 별로 생각이 없었다.
그리고 다음으로 생각했던 것은 전에도 써 본 적이 있었던 설치형 워드프레스였는데, 워드프레스는 장점도 많지만 단점도 여럿 있다.
결국 워드프레스인가… 하고 생각하면서 계속 찾아보니 Jekyll이라는 것을 통해 정적 웹사이트를 만들 수 있다는데, 이 Jekyll이 나의 호기심을 자극했다. 그래서 한 번 Jekyll을 사용해 보기로 했다.&lt;/p&gt;

&lt;p&gt;솔직히 말하자면 블로그를 해야겠다고 생각한 것보다 Jekyll을 써 보고 싶다는 생각이 먼저였다.
블로그는 Jekyll을 써먹어보기 위해 하는 것에 가깝다.
대부분의 개발자는 나의 생각을 이해할 것이다.
뭔가 하고 싶은 게 먼저 있어서 그것을 구현하기 위한 기술을 찾아보는 절차도 있지만, 역순으로 어떤 기술을 먼저 접하고 그것을 활용해 보고 싶어서 내가 직접 해보는 절차도 있다는 것이다.&lt;/p&gt;

&lt;p&gt;블로그를 하는 목적이랄까. 블로그를 시작하며 내가 생각한 바는 있는데 이 포스팅은 아니고 아마 다른 기회에 그것을 쓰면 좋을 것 같다.&lt;/p&gt;

&lt;h1 id=&quot;jekyll-설치-그리고-첫-번째-실패&quot;&gt;Jekyll 설치, 그리고 첫 번째 실패&lt;/h1&gt;
&lt;p&gt;나는 Windows 환경에서 cygwin을 사용하고 있었기 때문에 여기에 Jekyll을 설치해서 사용하려고 했다.
Jekyll의 설치는 &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyll 공식 홈페이지&lt;/a&gt;를 참고했다.&lt;/p&gt;

&lt;p&gt;Cygwin 설치 파일을 실행하면 package list가 아래처럼 주르륵 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://drive.google.com/uc?id=1Txs5i_3Vq_l8MLrLnJkvnneiYkHlYDvy&quot; alt=&quot;Cygwin package list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림은 category 기준으로 보이는데, 잘 보면 Ruby도 발견할 수 있다.
그 중에서 이미 설치되어 있는 package를 찾아서 삭제할 수 있고 설치되어 있지 않는 package를 찾아서 새로 설치할 수도 있다.
여기에서 나는 ruby, ruby-devel을 설치했다.
원래 공식 홈페이지에는 ubuntu linux에서 설치할 때 ruby, ruby-dev, build-essential를 설치하라고 되어 있었는데 cygwin package list에서는 ruby-dev가 없는 대신 ruby-devel이 있었고, build-essential은 아예 없었다.
그것을 대체할만한 다른 package가 있겠지만 잘 모르니까 일단 위의 2개만 설치해 보았다.&lt;/p&gt;

&lt;p&gt;그렇게 순조롭게 설치한 후 Jekyll을 설치하다가 아래와 같은 문제에 봉착했다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
Building native extensions.  This could take a while...
      1 [main] ruby 6344 child_info_fork::abort: C:\cygwin\bin\cyggmp-10.dll: Loaded to different address: parent(0x690000) != child(0xE30000)
      1 [main] ruby 11208 child_info_fork::abort: C:\cygwin\bin\cyggmp-10.dll: Loaded to different address: parent(0x690000) != child(0xE40000)
      1 [main] ruby 20176 child_info_fork::abort: C:\cygwin\bin\cyggmp-10.dll: Loaded to different address: parent(0x690000) != child(0xE40000)
      2 [main] ruby 18388 child_info_fork::abort: C:\cygwin\bin\cyggmp-10.dll: Loaded to different address: parent(0x690000) != child(0xDF0000)
      2 [main] ruby 10036 child_info_fork::abort: C:\cygwin\bin\cyggmp-10.dll: Loaded to different address: parent(0x690000) != child(0xE00000)
      1 [main] ruby 17064 child_info_fork::abort: C:\cygwin\bin\cyggmp-10.dll: Loaded to different address: parent(0x690000) != child(0x650000)
      2 [main] ruby 10300 child_info_fork::abort: C:\cygwin\bin\cyggmp-10.dll: Loaded to different address: parent(0x690000) != child(0xC30000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 abort가 발생했다.
당연히 Jekyll의 설치는 제대로 되지 않았다.
Stackoverflow 등 구글링을 해 보면 다른 사람들도 이와 같은 문제를 겪었다는 것을 알 수 있다. 그런데 이렇다할 뾰족한 방법이 없었다.
정확히 말하자면 답변으로 달린 방법은 몇 개 있었지만 내가 직접 해 보니 다 제대로 된 해결법은 아니었다.&lt;/p&gt;

&lt;p&gt;그렇다면 Jekyll은 cygwin에서 사용할 수 없는 것일까? 그건 아닐 거라고 생각했다.
나는 이번에 cygwin에 처음 ruby 및 그와 관련된 package를 설치한 것이지만, cygwin은 워낙 사용자가 많아서 package 자체에 문제가 있는 것은 아닐 것이고, 어떤 이유로 인해 내가 기존에 쓰던 환경에서 꼬이지 않았을까 생각했다.&lt;/p&gt;

&lt;p&gt;그래서 나는 &lt;strong&gt;과감하게&lt;/strong&gt; cygwin을 재설치했다.
Cygwin에는 내가 그동안 개발해 오면서 많은 것들을 설치하고 나에 맞게끔 설정했기 때문에 그것은 매우 과감한 결정이었다.
이것 역시 개발자들은 이해할 것이다. 환경을 바꾸는 것이 얼마나 과감하고 그리고 무모한 일인지.
Cygwin 설치에 대한 것은 조금 자세하게 다음에 포스팅할 예정이다.
똑같은 삽질이라도 다음번에는 더 빠르게 하기 위해서 기록을 남길 필요는 있다.&lt;/p&gt;

&lt;h1 id=&quot;두-번째-실패&quot;&gt;두 번째 실패&lt;/h1&gt;
&lt;p&gt;어쨌든, cygwin을 삭제 후 다시 설치했다.
이번에는 cygwin 설치 파일을 실행했을 때 나오는 package list에서 설치하지 않고, cygwin에 package manager인 apt-cyg를 설치한 후 그 package manager에서 ruby를 설치해 보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brunch.co.kr/@davisasan/37&quot;&gt;이 블로그&lt;/a&gt;를 참고해서 apt-cyg를 설치했다.
맨 처음 cygwin을 설치할 때에는 package list 중에서 다른 것은 모두 무시하고 wget만 깔았다.
그리고 cygwin의 설치가 다 되면 아래와 같은 명령으로 apt-cyg를 설치할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget raw.github.com/transcode-open/apt-cyg/master/apt-cyg
chmod +x apt-cyg
mv apt-cyg /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;보면 알겠지만 누군가 올려 놓은 apt-cyg를 github에서 받아와서, 권한 설정한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt; 폴더에 넣어주는 것이다.
위와 같이 해서 apt-cyg를 설치하고 나면 apt-cyg를 통해서 다른 필요한 package를 설치할 수 있다.&lt;/p&gt;

&lt;p&gt;습관인지 아니면 본능인지 모르겠지만 command line에서 뭘 하든 필수라고 할 수 있는 package들을 가장 먼저 설치했다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-cyg update
apt-cyg install vim curl git openssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음부터는 또 Jekyll의 설치법을 따라서 그대로 진행했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-cyg install ruby ruby-dev build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 주르륵 길게 로그가 출력되면서 열심히 설치한다. 그런데 불길하게 그 중에 이런 문구가 나타난다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Installing ruby-dev
Unable to locate package ruby-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아마도 ruby-dev가 제대로 설지되지 않았다는 말일 것 같은데… 일단 무시하고 설치를 계속했다.
(왜 불길한 예감은 항상 틀리지 않는 것일까…)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;를 설정하고 나서 gem을 통해 Jekyll을 설치해 보았다.
(Jekyll의 구체적인 설치 과정은 &lt;a href=&quot;/blog/2019/07/27/start-jekyll-(2)&quot;&gt;다음 포스팅&lt;/a&gt;에서 다루었다.)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll bundler
Fetching: public_suffix-3.1.1.gem (100%)
Successfully installed public_suffix-3.1.1
Fetching: addressable-2.6.0.gem (100%)
Successfully installed addressable-2.6.0
Fetching: colorator-1.1.0.gem (100%)
Successfully installed colorator-1.1.0
Fetching: http_parser.rb-0.6.0.gem (100%)
Building native extensions.  This could take a while...
ERROR:  Error installing jekyll:
        ERROR: Failed to build gem native extension.

    current directory: /home/sb.lee/.gem/ruby/2.3.0/gems/http_parser.rb-0.6.0/ext/ruby_http_parser
/usr/bin/ruby.exe -r ./siteconf20190727-17252-bha32i.rb extconf.rb
mkmf.rb can't find header files for ruby at /usr/share/ruby/include/ruby.h

extconf failed, exit code 1

Gem files will remain installed in /home/sb.lee/.gem/ruby/2.3.0/gems/http_parser.rb-0.6.0 for inspection.
Results logged to /home/sb.lee/.gem/ruby/2.3.0/extensions/x86-cygwin/2.3.0/http_parser.rb-0.6.0/gem_make.out
Fetching: bundler-2.0.2.gem (100%)
Successfully installed bundler-2.0.2
Parsing documentation for bundler-2.0.2
Installing ri documentation for bundler-2.0.2
Done installing documentation for bundler after 16 seconds
1 gem installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 로그를 잘 보면 bundler는 제대로 설치가 되었는데 Jekyll을 설치하지 못했다.
이래서는 cygwin에서 Jekyll을 쓸 수가 없지 않을까?
처음 cygwin을 재설치하고 나서부터 진행했던 것이기 때문에 이번에는 package끼리 꼬인다거나 다른 문제가 발생할 소지가 없었기 때문이다.&lt;/p&gt;

&lt;p&gt;이렇게 Jekyll을 설치하려고 했던 나의 첫 시도는 내게 익숙했던 개발 환경만 허망하게 날린 채 아무런 결과를 내지 못했다.&lt;/p&gt;</content><author><name></name></author><summary type="html">시작 블로그를 시작하려고 한다. 아마 나의 이런저런 생각들, 그리고 내가 했던 것들을 기록하기 위한 용도로 사용할 것 같다.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://chobolife.github.io/blog/2019/07/26/welcome-to-jekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-07-26T07:00:00+00:00</published><updated>2019-07-26T07:00:00+00:00</updated><id>http://chobolife.github.io/blog/2019/07/26/welcome-to-jekyll</id><content type="html" xml:base="http://chobolife.github.io/blog/2019/07/26/welcome-to-jekyll">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>